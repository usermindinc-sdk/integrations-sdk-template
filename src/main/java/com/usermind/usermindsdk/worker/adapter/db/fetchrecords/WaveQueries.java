package com.usermind.usermindsdk.worker.adapter.db.fetchrecords;

/**
 * Created by flore on 8/16/16.
 */
public class WaveQueries {

   /* createFaqwadMessage(
    --      String queueName {0},
    --      String stateName {1},
    --      String typeName {2},
    --      Long   organizationId {3},
    --      String objectId {4},
    --      String singletonId {5},
    --      Long   messageTimestamp {6},  // defaults to db time if null
    --      Long   messageOffset {7},
    --      String messageData {8},
    --      Long   priority  {9}         // defaults to 100 if null
    --      )
    */
  public static final String createFAQWADMessage = ""
      + "WITH new_queue AS (\n"
      + "            SELECT\n"
      + "                faqwad_queue_definition_id,\n"
      + "                base_retry_interval_seconds\n"
      + "            FROM faqwad_queue_definitions\n"
      + "            WHERE faqwad_queue_name = {0}\n"
      + "            ),\n"
      + "        new_fs AS (\n"
      + "            SELECT faqwad_state_id\n"
      + "            FROM faqwad_states\n"
      + "            WHERE faqwad_state_name = {1}\n"
      + "            ),\n"
      + "        new_ft AS (\n"
      + "            SELECT faqwad_type_id\n"
      + "            FROM faqwad_types\n"
      + "            WHERE faqwad_type_name = {2}\n"
      + "        ),\n"
      + "        added_message AS (\n"
      + "            INSERT INTO faqwad_messages\n"
      + "                (\n"
      + "                    faqwad_queue_definition_id,\n"
      + "                    organization_id,\n"
      + "                    faqwad_object_id,\n"
      + "                    faqwad_singleton_id,\n"
      + "                    faqwad_message_timestamp,\n"
      + "                    faqwad_message_offset,\n"
      + "                    faqwad_type_id,\n"
      + "                    faqwad_state_id,\n"
      + "                    next_retry_time_utc,\n"
      + "                    faqwad_message_data,\n"
      + "                    priority\n"
      + "                    )\n"
      + "                SELECT\n"
      + "                    new_queue.faqwad_queue_definition_id,\n"
      + "                    {3},\n"
      + "                    {4},\n"
      + "                    {5},\n"
      + "                    (COALESCE( CAST( {6} AS BIGINT),\n"
      + "                        TRUNC(EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)\n"
      + "                        )),\n"
      + "                    {7},\n"
      + "                    new_ft.faqwad_type_id,\n"
      + "                    new_fs.faqwad_state_id,\n"
      + "                    (CURRENT_TIMESTAMP + \n"
      + "                        (new_queue.base_retry_interval_seconds\n"
      + "                            * INTERVAL '1 second'\n"
      + "                        )),\n"
      + "                    CAST({8} AS JSONB),\n"
      + "                    (COALESCE(CAST({9} AS BIGINT), 100))\n"
      + "                FROM new_queue, new_fs, new_ft\n"
      + "                RETURNING *\n"
      + "            )\n"
      + "        SELECT\n"
      + "            am.faqwad_queue_definition_id,\n"
      + "            fqd.faqwad_queue_name,\n"
      + "            am.faqwad_message_id,\n"
      + "            am.faqwad_object_id,\n"
      + "            am.faqwad_message_timestamp,\n"
      + "            am.faqwad_message_offset,\n"
      + "            am.faqwad_type_id,\n"
      + "            ft.faqwad_type_name,\n"
      + "            am.faqwad_state_id,\n"
      + "            fs.faqwad_state_name,\n"
      + "            am.faqwad_message_data,\n"
      + "            am.organization_id,\n"
      + "            am.faqwad_singleton_id,\n"
      + "            am.priority,\n"
      + "            am.retry_count,\n"
      + "            am.next_retry_time_utc,\n"
      + "            am.checkout_count,\n"
      + "            am.checkout_until_utc,\n"
      + "            am.last_checked_out_by,\n"
      + "            am.last_worked_by,\n"
      + "            am.last_work_start_time_utc,\n"
      + "            am.first_work_start_time_utc,\n"
      + "            am.last_work_update_time_utc,\n"
      + "            am.marked_done_time_utc,\n"
      + "            am.created_at,\n"
      + "            am.updated_at,\n"
      + "            am.rvn\n"
      + "         FROM\n"
      + "            added_message am\n"
      + "            JOIN faqwad_states fs USING (faqwad_state_id)\n"
      + "            JOIN faqwad_types ft USING (faqwad_type_id)\n"
      + "            JOIN faqwad_queue_definitions fqd USING (faqwad_queue_definition_id)";


  /*
    -- MarkQueued(fm_id, rvn)
    --  fm_id {0}
    --  rvn {1}
    -- Only works for things that were Blocked. The next_retry_time_utc
    -- is untouched as nothing has been trying let-alone retrying.
   */
  public static final String markQueued = ""
      + "WITH\n"
      + "        marked_waiting AS (\n"
      + "            UPDATE faqwad_messages\n"
      + "                SET\n"
      + "                    faqwad_state_id = 1, -- Queued state\n"
      + "                    rvn = {1}\n"
      + "                WHERE\n"
      + "                    faqwad_message_id = {0}\n"
      + "                    and faqwad_state_id = 50 -- Blocked state\n"
      + "                RETURNING *\n"
      + "            )\n"
      + "\n"
      + "        -- Now load up the attributes of the new faqwad_message we just marked\n"
      + "        -- ready so the client can do something useful without another database\n"
      + "        -- roundtrip.\n"
      + "\n"
      + "        SELECT\n"
      + "            mw.faqwad_queue_definition_id,\n"
      + "            fqd.faqwad_queue_name,\n"
      + "            mw.faqwad_message_id,\n"
      + "            mw.faqwad_object_id,\n"
      + "            mw.faqwad_message_timestamp,\n"
      + "            mw.faqwad_message_offset,\n"
      + "            mw.faqwad_type_id,\n"
      + "            ft.faqwad_type_name,\n"
      + "            mw.faqwad_state_id,\n"
      + "            fs.faqwad_state_name,\n"
      + "            mw.faqwad_message_data,\n"
      + "            mw.organization_id,\n"
      + "            mw.faqwad_singleton_id,\n"
      + "            mw.priority,\n"
      + "            mw.retry_count,\n"
      + "            mw.next_retry_time_utc,\n"
      + "            mw.checkout_count,\n"
      + "            mw.checkout_until_utc,\n"
      + "            mw.last_checked_out_by,\n"
      + "            mw.last_worked_by,\n"
      + "            mw.last_work_start_time_utc,\n"
      + "            mw.first_work_start_time_utc,\n"
      + "            mw.last_work_update_time_utc,\n"
      + "            mw.marked_done_time_utc,\n"
      + "            mw.created_at,\n"
      + "            mw.updated_at,\n"
      + "            mw.rvn\n"
      + "        FROM marked_waiting mw\n"
      + "        JOIN faqwad_states fs USING (faqwad_state_id)\n"
      + "        JOIN faqwad_types ft USING (faqwad_type_id)\n"
      + "        JOIN faqwad_queue_definitions fqd USING (faqwad_queue_definition_id)";

  /*
   * -- String queueName {0},
    -- String objectId {1}
    -- String singletonId {2}
    --
    -- Used to find what messages are open with the specific
    -- queue scope with the given singleton_id value. This list
    -- does not include the faqwad messages that are in terminal states.
   */
  public static final String getOpenMessageFromSingletonId = ""
      + "SELECT\n"
      + "        fm.faqwad_queue_definition_id,\n"
      + "        fqd.faqwad_queue_name,\n"
      + "        fm.faqwad_message_id,\n"
      + "        fm.faqwad_object_id,\n"
      + "        fm.faqwad_message_timestamp,\n"
      + "        fm.faqwad_message_offset,\n"
      + "        fm.faqwad_type_id,\n"
      + "        ft.faqwad_type_name,\n"
      + "        fm.faqwad_state_id,\n"
      + "        fs.faqwad_state_name,\n"
      + "        fm.faqwad_message_data,\n"
      + "        fm.organization_id,\n"
      + "        fm.faqwad_singleton_id,\n"
      + "        fm.priority,\n"
      + "        fm.retry_count,\n"
      + "        fm.next_retry_time_utc,\n"
      + "        fm.checkout_count,\n"
      + "        fm.checkout_until_utc,\n"
      + "        fm.last_checked_out_by,\n"
      + "        fm.last_worked_by,\n"
      + "        fm.last_work_start_time_utc,\n"
      + "        fm.first_work_start_time_utc,\n"
      + "        fm.last_work_update_time_utc,\n"
      + "        fm.marked_done_time_utc,\n"
      + "        fm.created_at,\n"
      + "        fm.updated_at,\n"
      + "        fm.rvn\n"
      + "    FROM\n"
      + "        faqwad_messages fm\n"
      + "        JOIN faqwad_states fs USING (faqwad_state_id)\n"
      + "        JOIN faqwad_types ft USING (faqwad_type_id)\n"
      + "        JOIN faqwad_queue_definitions fqd USING (faqwad_queue_definition_id)\n"
      + "    WHERE\n"
      + "        fqd.faqwad_queue_name = {0}\n"
      + "        AND fm.faqwad_object_id = {1}\n"
      + "        AND fm.faqwad_singleton_id = {2}\n"
      + "        AND fm.faqwad_state_id IN (\n"
      + "            SELECT\n"
      + "                faqwad_state_id\n"
      + "            FROM\n"
      + "                faqwad_states\n"
      + "            WHERE\n"
      + "                is_terminal = FALSE\n"
      + "            )\n"
      + "    ORDER BY\n"
      + "        faqwad_object_id,\n"
      + "        faqwad_message_timestamp,\n"
      + "        faqwad_message_offset";

  /*
   * -- String queueName {0},
    -- Long ageInSeconds {1}
    --
    -- Used to find what messages are Blocked the in the specific queue scope
    -- where the current time minus the creation date is larger than ageInSeconds.
   */
  public static final String getBlockedMessageOlderThan = " "
      + "SELECT\n"
      + "        fm.faqwad_queue_definition_id,\n"
      + "        fqd.faqwad_queue_name,\n"
      + "        fm.faqwad_message_id,\n"
      + "        fm.faqwad_object_id,\n"
      + "        fm.faqwad_message_timestamp,\n"
      + "        fm.faqwad_message_offset,\n"
      + "        fm.faqwad_type_id,\n"
      + "        ft.faqwad_type_name,\n"
      + "        fm.faqwad_state_id,\n"
      + "        fs.faqwad_state_name,\n"
      + "        fm.faqwad_message_data,\n"
      + "        fm.organization_id,\n"
      + "        fm.faqwad_singleton_id,\n"
      + "        fm.priority,\n"
      + "        fm.retry_count,\n"
      + "        fm.next_retry_time_utc,\n"
      + "        fm.checkout_count,\n"
      + "        fm.checkout_until_utc,\n"
      + "        fm.last_checked_out_by,\n"
      + "        fm.last_worked_by,\n"
      + "        fm.last_work_start_time_utc,\n"
      + "        fm.first_work_start_time_utc,\n"
      + "        fm.last_work_update_time_utc,\n"
      + "        fm.marked_done_time_utc,\n"
      + "        fm.created_at,\n"
      + "        fm.updated_at,\n"
      + "        fm.rvn\n"
      + "    FROM\n"
      + "        faqwad_messages fm\n"
      + "        JOIN faqwad_states fs USING (faqwad_state_id)\n"
      + "        JOIN faqwad_types ft USING (faqwad_type_id)\n"
      + "        JOIN faqwad_queue_definitions fqd USING (faqwad_queue_definition_id)\n"
      + "    WHERE\n"
      + "        fqd.faqwad_queue_name = {0}\n"
      + "        AND fs.faqwad_state_name = 'Blocked'\n"
      + "        AND (CURRENT_TIMESTAMP - fm.created_at)\n"
      + "            > ({1} * interval '1 second')\n"
      + "    ORDER BY\n"
      + "        faqwad_object_id,\n"
      + "        faqwad_message_timestamp,\n"
      + "        faqwad_message_offset";
}
