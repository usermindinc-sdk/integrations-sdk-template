package com.usermind.usermindsdk.worker.base;

import com.usermind.usermindsdk.common.config.Configuration;
import com.usermind.usermindsdk.common.config.ConfigurationBuilder;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * A record that will be part of the streams generated by integrations.
 */
public class IntegrationStreamRecord {
  private final Configuration augmentedData;

  /**
   * ctor for an integration stream record.
   * @param recordType record type
   * @param type entity type
   * @param runId run id
   * @param data the data to put in the record body (if !raw)
   * @param rawData the rawData to put in the record body (if raw)
   */
  public IntegrationStreamRecord(RecordType recordType, String runId, String type,
                                 Configuration data, String rawData) {
    checkNotNull(recordType);
    checkNotNull(runId);
    checkNotNull(type);
    Configuration augmentedData = new ConfigurationBuilder()
        .put("recordType", recordType.toString())
        .put("runId", runId)
        .put("type", type)
        .toConfiguration();
    if (data != null) {
      augmentedData = augmentedData.mergeAtPath("data", data);
    }
    if (rawData != null) {
      augmentedData = new ConfigurationBuilder(augmentedData)
          .put("rawData", rawData).toConfiguration();
    }
    this.augmentedData = augmentedData;
    checkRecordContents();
  }

  /**
   * ctor for an integration stream record for a string json.
   * @param serializedRecord serialized string.
   */
  public IntegrationStreamRecord(String serializedRecord) {
    this.augmentedData = ConfigurationBuilder.createConfiguration(serializedRecord);
    augmentedData.checkPathExists("recordType");
    augmentedData.checkPathExists("runId");
    augmentedData.checkPathExists("type");
    checkRecordContents();
  }

  private void checkRecordContents() {
    checkNotNull(augmentedData);
    if (isRaw()) {
      augmentedData.checkPathExists("rawData");
    } else {
      augmentedData.checkPathExists("data");
    }
  }

  /**
   * determine if the record is a marker.
   * @return boolean value
   */
  public boolean isMarker() {
    RecordType myType = getRecordType();
    return (myType == RecordType.END_FETCH_MARKER) || (myType == RecordType.RAW_ENTITY_METADATA);
  }

  /**
   * determine if the record contains raw data.
   * @return boolean value
   */
  public boolean isRaw() {
    RecordType myType = getRecordType();
    return ((myType == RecordType.RAW_ENTITY_METADATA) || (myType == RecordType.RAW_ENTITY_DATA));
  }

  /**
   * determine if the record contains metadata.
   * @return boolean value
   */
  public boolean isMetadata() {
    RecordType myType = getRecordType();
    return ((myType == RecordType.RAW_ENTITY_METADATA) || (myType == RecordType.ENTITY_METADATA));
  }

  /**
   * get record type.
   * @return the record type
   */
  public RecordType getRecordType() {
    return RecordType.valueOf(augmentedData.getString("recordType"));
  }

  /**
   * get run id.
   * @return the run id
   */
  public String getRunId() {
    return augmentedData.getString("runId");
  }

  /**
   * get type packed in the record.
   * @return the type
   */
  public String getType() {
    return augmentedData.getString("type");
  }

  /**
   * return the data in the stream record.
   * @return the data
   */
  public Configuration getData() {
    if (isRaw()) {
      return null;
    }
    return augmentedData.atPath("data");
  }

  /**
   * return the raw data in the stream record.
   * @return the raw data
   */
  public String getRawData() {
    if (!isRaw()) {
      return null;
    }
    return augmentedData.getString("rawData");
  }

  /**
   * convert record to string.
   * @return string representation
   */
  public String toString() {
    return augmentedData.toString();
  }

}
